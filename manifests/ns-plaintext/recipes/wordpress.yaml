# Source: wordpress/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: wordpress
  namespace: plaintext
  labels:
    app: "wordpress"
    chart: "wordpress-8.0.1"
    release: "team7"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "12Gi"
---
# Source: wordpress/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: plaintext
  labels:
    app: "wordpress"
    chart: "wordpress-8.0.1"
    release: "team7"
    heritage: "Helm"
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "false"
    # service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: "true"

    external-dns.alpha.kubernetes.io/hostname: andromedarabbit.net
    external-dns.alpha.kubernetes.io/ttl: "120"
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Local"
  ports:
    - name: http
      port: 80
      targetPort: http
      # protocol: TCP
    # - name: https
    #   port: 443
    #   targetPort: https
    #   # protocol: TCP
  selector:
    app: "wordpress"
  # loadBalancerSourceRanges:
  # - 182.172.236.122/32
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-scripts
  namespace: plaintext
data:
  go.sh: |
    #!/bin/bash -xe
    cp -f /opt/tmp/php-fpm.conf /opt/bitnami/nginx/conf/server_blocks/
    cp -f /opt/tmp/http.conf /opt/bitnami/nginx/conf/server_blocks/
    cp -f /opt/tmp/nginx-cache.conf /opt/bitnami/nginx/conf/server_blocks/
    cp -f /opt/tmp/nginx.conf /opt/bitnami/nginx/conf/

    /app-entrypoint.sh /run.sh

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  namespace: plaintext
data:
  nginx.conf: |-
    # Based on https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf
    user              nginx nginx;  ## Default: nobody

    worker_processes  auto;
    error_log         "/opt/bitnami/nginx/logs/error.log" warn;
    pid               "/opt/bitnami/nginx/tmp/nginx.pid";

    events {
      worker_connections  2048;
      multi_accept        on;
      use epoll;
    }

    http {
      include       mime.types;
      default_type  application/octet-stream;
      log_format    main '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status  $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
      # access_log    "/opt/bitnami/nginx/logs/access.log" main;
      access_log    off;
      add_header    X-Frame-Options SAMEORIGIN;

      client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
      proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
      fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
      scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
      uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

      sendfile           on;
      tcp_nopush         on;
      tcp_nodelay        off;
      gzip               on;
      gzip_http_version  1.0;
      gzip_comp_level    2;
      gzip_proxied       any;
      gzip_types         text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
      keepalive_timeout  65;
      ssl_protocols      TLSv1 TLSv1.1 TLSv1.2;
      client_max_body_size 80M;

      include  "/opt/bitnami/nginx/conf/server_blocks/*.conf";

      # HTTP Server
      server {
        # port to listen on. Can also be set to an IP:PORT
        listen  80;

        location /status {
            stub_status on;
            access_log   off;
            allow 127.0.0.1;
            deny all;
        }
      }
    }

  php-fpm.conf: |-
    # PHP-FPM FastCGI server
    # network or unix domain socket configuration

    upstream php {
            server 127.0.0.1:9000;
            #server unix:/run/php-fpm/www.sock;
    }

  nginx-cache.conf: |-
    proxy_cache_path /opt/bitnami/nginx/tmp/cache keys_zone=cache:12m  max_size=1g levels=1:2 inactive=600s max_size=100m;

  http.conf: |-
    server {
      listen 0.0.0.0:80;
      server_name _;

      proxy_cache cache;
      proxy_cache_lock on;
      proxy_cache_valid 200 1s;
      proxy_cache_use_stale updating;

      root /bitnami/wordpress;
      index index.php;

      client_max_body_size 20M;
      client_body_buffer_size 20M;

      if (!-e $request_filename) {
        # rewrite /wp-admin$ https://$host$uri/ permanent;
        rewrite ^/(.+)$ /index.php?q=$1 last;
      }

      location = /favicon.ico {
        log_not_found off;
        access_log off;
      }

      location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
      }

      error_page  404              /404.html;

      # redirect server error pages to the static page /50x.html
      #
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   /bitnami/wordpress;
      }

      location / {
        try_files $uri $uri/ /index.php?q=$uri&$args;
      }

      # deny access to .htaccess files, if Apache's document root
      # concurs with nginx's one
      #
      location ~ /\.ht {
          deny  all;
      }

      location ~ \.php$ {
        root           /bitnami/wordpress;
        try_files $uri =404;

        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        #fastcgi_pass unix:/var/run/php-fpm/php5-fpm.sock;
        fastcgi_pass php;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        fastcgi_buffer_size 128k;
        fastcgi_buffers 256 16k;
        fastcgi_busy_buffers_size 256k;
        fastcgi_temp_file_write_size 256k;

        include fastcgi_params;
      }

      # Expire rules for static content

      # cache.appcache, your document html and data
      location ~* \.(?:manifest|appcache|html?)$ {
        expires -1;
        # access_log logs/static.log; # I don't usually include a static log
      }

      # Feed
      location ~* \.(?:rss|atom)$ {
        expires 1h;
        add_header Cache-Control "public";
      }

      # Media: images, icons, video, audio, HTC
      location ~* \.(jpg|jpeg|gif|png|ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
          expires 1M;
          log_not_found off;
          access_log off;
          add_header Cache-Control "public";
      }

      # CSS and Javascript
      location ~* \.(?:css|js)$ {
          expires 1y;
          access_log off;
          add_header Cache-Control "public";
      }
    }
---
# Source: wordpress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: plaintext
  labels:
    app: "wordpress"
    chart: "wordpress-8.0.1"
    release: "team7"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: "wordpress"
      release: "team7"
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app: "wordpress"
        chart: "wordpress-8.0.1"
        release: "team7"
    spec:
      # securityContext:
      #   enabled: true
      #   fsGroup: 0
      #   runAsUser: 0
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "status.localhost"
      initContainers:
      - name: volume-permissions
        image: busybox
        command: ['sh', '-c', 'chmod -R g+rwX /opt/bitnami/wordpress']
        volumeMounts:
        - mountPath: /opt/bitnami/wordpress
          name: wordpress-data
        - name: wordpress-config
          mountPath: /opt/tmp/wordpress-vhosts.conf
          subPath: wordpress-vhosts.conf
      containers:
      - name: wordpress
        image: docker.io/bitnami/wordpress-nginx:5.3.2-debian-9-r14
        imagePullPolicy: "IfNotPresent"
        args:
        - /scripts/go.sh
        # command: ['sh', '-c', 'cp -f /opt/tmp/*.conf /opt/bitnami/nginx/conf/server_blocks/ && curl --silent -Lo jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x ./jq && mv jq /usr/local/bin/jq && jq -r ".components .\"com.bitnami.wordpress\" .values .persistDir = \"/bitnami/wordpress/wordpress\"" /root/.nami/registry.json > /root/.nami/registry.json && /app-entrypoint.sh /run.sh']
        # args: ['/run.sh']
        # command: ["/bin/sh"]
        # args: ["-c", "while true; do echo hello; sleep 10;done"]
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: MARIADB_HOST
          value: mariadb
        - name: MARIADB_PORT_NUMBER
          value: "3306"
        - name: WORDPRESS_DATABASE_NAME
          value: "wordpress"
        - name: WORDPRESS_DATABASE_USER
          value: "bn_wordpress"
        - name: WORDPRESS_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb
              key: mariadb-password
        - name: WORDPRESS_USERNAME
          value: "team7"
        - name: WORDPRESS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wordpress
              key: wordpress-password
        - name: WORDPRESS_EMAIL
          value: "team7@unchartedsky.com"
        - name: WORDPRESS_FIRST_NAME
          value: "Admin"
        - name: WORDPRESS_LAST_NAME
          value: "Team7"
        - name: WORDPRESS_HTACCESS_OVERRIDE_NONE
          value: "no"
        - name: WORDPRESS_BLOG_NAME
          value: "Team7's Home!"
        - name: WORDPRESS_SKIP_INSTALL
          value: "yes"
        - name: WORDPRESS_TABLE_PREFIX
          value: "wp_"
        - name: WORDPRESS_SCHEME
          value: "https"
        ports:
        - name: http
          containerPort: 80
        # - name: https
        #   containerPort: 443
        livenessProbe:
          httpGet:
            path: /wp-login.php
            port: http
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /wp-login.php
            port: http
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /bitnami/wordpress
          name: wordpress-data
          subPath: wordpress
        # - name: wordpress-config
        #   mountPath: /opt/bitnami/nginx/conf/vhosts/wordpress-vhosts.conf
        #   subPath: wordpress-vhosts.conf
        - name: wordpress-config
          mountPath: /opt/tmp
        - name: scripts-d
          mountPath: /scripts
        resources:
          requests:
            cpu: 100m
            memory: 257Mi
          limits:
            cpu: 3000m
            memory: 3072Mi
      volumes:
      - name: wordpress-data
        persistentVolumeClaim:
          claimName: wordpress
      - name: wordpress-config
        configMap:
          name: wordpress-config
      - name: scripts-d
        projected:
          defaultMode: 500
          sources:
          - configMap:
              name: wordpress-scripts
              items:
              - key: go.sh
                path: go.sh

---
# Source: wordpress/templates/tests/test-mariadb-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "credentials-test"
  namespace: plaintext
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: credentials-test
    image: docker.io/bitnami/wordpress:5.3.0-debian-9-r0
    imagePullPolicy: "IfNotPresent"
    env:
      - name: MARIADB_HOST
        value: mariadb
      - name: MARIADB_PORT
        value: "3306"
      - name: WORDPRESS_DATABASE_NAME
        value: "wordpress"
      - name: WORDPRESS_DATABASE_USER
        value: "bn_wordpress"
      - name: WORDPRESS_DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mariadb
            key: mariadb-password
    command: ["sh", "-c", "mysql --host=$MARIADB_HOST --port=$MARIADB_PORT --user=$WORDPRESS_DATABASE_USER --password=$WORDPRESS_DATABASE_PASSWORD"]
  restartPolicy: Never
