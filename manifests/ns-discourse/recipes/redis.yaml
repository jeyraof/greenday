kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis
  namespace: discourse
  labels:
    app: redis
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "32Gi"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: discourse
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: redis
        image: "bitnami/redis:4.0.7-r0"
        imagePullPolicy: IfNotPresent
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        ports:
        - name: redis
          containerPort: 6379
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 1000m
            memory: 1024Mi
          requests:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: redis-data
          mountPath: /bitnami
          subPath:
      - name: metrics
        image: "oliver006/redis_exporter:v0.11"
        imagePullPolicy: "Always"
        env:
        - name: REDIS_ALIAS
          value: redis
        ports:
        - name: metrics
          containerPort: 9121
        resources:
          limits:
            cpu: 300m
            memory: 64Mi
          requests:
            cpu: 100m
            memory: 32Mi
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: discourse
  labels:
    app: redis
  annotations:
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  - name: metrics
    port: 9121
    targetPort: metrics
  selector:
    app: redis
---
# 이 네트워크 정책을 활성화하면 ELB를 통해 Redis에 접근하는 기능도 막힌다.
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: redis-allow
  namespace: discourse
spec:
  podSelector:
    matchLabels:
      app: redis
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: discourse
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
