#!/bin/bash -e
OSTYPE=$(uname)
case "$OSTYPE" in
	Darwin)  export THIS_OS="darwin" ;;
	Linux) export THIS_OS="linux" ;;
	*) echo "Your Operating System '$THIS_OS' is not supported." && exit 1 ;;
esac

ARCHITECTURE=$(uname -m)
case "$ARCHITECTURE" in
	amd64)  export ARCH="amd64" ;;
	x86_64) export ARCH="amd64" ;;
	*) echo "Your Architecture '$ARCH' is not supported."  && exit 2 ;;
esac

PATH_add "${PWD}/utils"
PATH_add "${PWD}/bin/${THIS_OS}_${ARCH}"

export THIS_DIR="$(git rev-parse --show-toplevel)"
export SECRETS_DIR="${THIS_DIR}/.secrets"

# mozilla/sops
make decrypt

source "${SECRETS_DIR}/.envrc.sh"

if [[ -f "${THIS_DIR}/kubeconfig.yaml" ]]; then
	export KUBECONFIG="${THIS_DIR}/kubeconfig.yaml"
else
	export KUBECONFIG="${SECRETS_DIR}/kubeconfig.yaml"
fi

# SSH
ssh() {
	MY_IP=$(curl --silent https://api.ipify.org) && doctl compute firewall add-rules $(doctl compute firewall list --output=json | jq -r '.[].id') --inbound-rules "protocol:tcp,ports:22,address:${MY_IP}/32"

	/usr/bin/ssh $@

	MY_IP=$(curl --silent https://api.ipify.org) && doctl compute firewall remove-rules $(doctl compute firewall list --output=json | jq -r '.[].id') --inbound-rules "protocol:tcp,ports:22,address:${MY_IP}/32"
}

# Kubernetes
export HELM_HOME="${THIS_DIR}/.helm"
export KUBE_EDITOR="vim"

export_alias k 'kubectl $@'
export_alias kube 'kubectl $@'
export_alias s3cmd '/usr/local/bin/s3cmd --config=${SECRETS_DIR}/.s3cfg $@'

export CLUSTER_CODENAME="team7"
start-kubectl-fzf.sh > /dev/null 2>&1 || true
